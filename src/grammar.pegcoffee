{
  global.ctx = {}
  ctx.indentStack = []
  ctx.indent = ""
}

start = program
program = lines:line* { type: 'program', body: lines}

line = samedent node:(
  forStatement / ifStatement / element / comment / inlineCode
  ) EOL? {node}

element = s:assignable props:props? _* styles:styles? EOL? children: ( indent c:line* dedent { c })?
  {
    {type: 'element', value: s, children, props, styles}
  }
  assignable
    =
      elementName: symbol modifiers:modifier*
      {
        type: 'element'
        elementType: elementName
        modifiers: modifiers
      }
    /
      modifiers:modifier+
      {
        type: 'element'
        elementType: 'div'
        modifiers: modifiers
      }
  modifier = className / id / ref
  className = '.' className:symbol {type: 'className', value:className}
  id = '#' id:symbol {type: 'id', value: id}
  ref = '&' ref:symbol {type: 'ref', value: ref}

  props = "(" __ props:(p:property __ {p})* ")"
    {
      type: 'props'
      children: props
    }

  styles = "{" __ props:(p:property __ {p})* "}"
    {
      type: 'styles'
      children: props
    }
  property = key:symbol __ '=' __ expr: expr
    {
      type: 'property'
      key: key
      expr: expr
    }

children = EOL? children: ( indent c:line* dedent { c }) {children}

// TODO: fix statement
ifStatement = 'if' _+ expr:expr children:children {
  type: 'if'
  condition: expr
  body: children
}

forStatement = 'for' _+ left:identifier _+ "in" _+ right:identifier children:children {
  type: 'for'
  left: left
  right: right
  body: children
}

symbol = $([a-zA-Z] [a-zA-Z\d]*)

expr = value
value = boolean / number / string / identifier

identifier = symbol:symbol {type: 'identifier', value: symbol}
string
  = "\"" value: symbol "\"" {type: 'string', value: value}
  / "\'" value: symbol "\'" {type: 'string', value: value}

number = digits:digits {type: 'number', value: digits}
digits = n:$( ('+'/'-')? [1-9] [0-9]*) { parseInt(n, 10)}

boolean = bool:bool {type: 'boolean', value: bool}
bool = "true" / "false"

_ = [ \n\t\r]
__ = _*

comment = '//' value:$([a-zA-Z\d ]*)
  {
    {type: 'comment', value}
  }

//inlineCode = '-' value: $([a-zA-Z\d ]*)
inlineCode = '-' value: $((!'\n' .)*)
  {
    {type: 'inlineCode', value}
  }

EOL = "\r\n" / "\n" / "\r"

samedent
  = i:[ \t]* &{
    i.join('') is ctx.indent
  }

indent
  = &(
      i:[ \t]+ &{
        i.length > ctx.indent.length
      }
      {
        ctx.indentStack.push(ctx.indent)
        ctx.indent = i.join("")
      }
    )

dedent
  = {
    ctx.indent = ctx.indentStack.pop()
  }
