//////////////
// Expressions
//////////////

expr = MultiplicativeExpression / primitive / embededExpr / identifier
identifier = thisIdentifier / memberAccessableIdentifier / singleIdentifier
singleIdentifier = !reserved symbol:symbol {type: 'identifier', value: symbol}
thisIdentifier = !reserved '@' s:dottableSymbol {type:'thisIdentifier', value: s}
memberAccessableIdentifier = !reserved symbol:dottableSymbol {type: 'identifier', value: symbol}

embededExpr
  = '{-' code:$((!'-}' .)*) '-}' {type: 'embededExpr', value: code}
  / '{' code:$((!'}' .)*) '}' {type: 'embededExpr', value: code}

// binary expression

/*
LeftHandSideExpression
  = CallExpression
  / NewExpression

PostfixExpression
  = argument:LeftHandSideExpression _ operator:PostfixOperator {
      {
        type:     "UpdateExpression",
        operator: operator,
        argument: argument,
        prefix:   false
      };
    }
  / LeftHandSideExpression

PostfixOperator
  = "++"
  / "--"
*/

UnaryExpression
  //= PostfixExpression
  = operator:UnaryOperator __ argument:UnaryExpression {
      type =
        if operator is "++" or operator is "--"
          "UpdateExpression"
        else
          "UnaryExpression"

      {
        type:     type
        operator: operator
        argument: argument
        prefix:   true
      }
    }

UnaryOperator
  = $DeleteToken
  / $VoidToken
  / $TypeofToken
  / "++"
  / "--"
  / $("+" !"=")
  / $("-" !"=")
  / "~"
  / "!"

MultiplicativeExpression
  = first:UnaryExpression
    rest:(__ MultiplicativeOperator __ UnaryExpression)*
    { buildBinaryExpression(first, rest)}

MultiplicativeOperator
  = $("*" !"=")
  / $("/" !"=")
  / $("%" !"=")

AdditiveExpression
  = first:MultiplicativeExpression
    rest:(__ AdditiveOperator __ MultiplicativeExpression)*
    { buildBinaryExpression(first, rest) }

AdditiveOperator
  = $("+" ![+=])
  / $("-" ![-=])

ShiftExpression
  = first:AdditiveExpression
    rest:(__ ShiftOperator __ AdditiveExpression)*
    { buildBinaryExpression(first, rest); }

ShiftOperator
  = $("<<"  !"=")
  / $(">>>" !"=")
  / $(">>"  !"=")

RelationalExpression
  = first:ShiftExpression
    rest:(__ RelationalOperator __ ShiftExpression)*
    { buildBinaryExpression(first, rest); }

RelationalOperator
  = "<="
  / ">="
  / $("<" !"<")
  / $(">" !">")
  / $InstanceofToken
  / $InToken

RelationalExpressionNoIn
  = first:ShiftExpression
    rest:(__ RelationalOperatorNoIn __ ShiftExpression)*
    { buildBinaryExpression(first, rest); }

RelationalOperatorNoIn
  = "<="
  / ">="
  / $("<" !"<")
  / $(">" !">")
  / $InstanceofToken

EqualityExpression
  = first:RelationalExpression
    rest:(__ EqualityOperator __ RelationalExpression)*
    { buildBinaryExpression(first, rest); }

EqualityExpressionNoIn
  = first:RelationalExpressionNoIn
    rest:(__ EqualityOperator __ RelationalExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

EqualityOperator
  = "==="
  / "!=="
  / "=="
  / "!="

BitwiseANDExpression
  = first:EqualityExpression
    rest:(__ BitwiseANDOperator __ EqualityExpression)*
    { buildBinaryExpression(first, rest); }

BitwiseANDExpressionNoIn
  = first:EqualityExpressionNoIn
    rest:(__ BitwiseANDOperator __ EqualityExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

BitwiseANDOperator
  = $("&" ![&=])

BitwiseXORExpression
  = first:BitwiseANDExpression
    rest:(__ BitwiseXOROperator __ BitwiseANDExpression)*
    { buildBinaryExpression(first, rest); }

BitwiseXORExpressionNoIn
  = first:BitwiseANDExpressionNoIn
    rest:(__ BitwiseXOROperator __ BitwiseANDExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

BitwiseXOROperator
  = $("^" !"=")

BitwiseORExpression
  = first:BitwiseXORExpression
    rest:(__ BitwiseOROperator __ BitwiseXORExpression)*
    { buildBinaryExpression(first, rest); }

BitwiseORExpressionNoIn
  = first:BitwiseXORExpressionNoIn
    rest:(__ BitwiseOROperator __ BitwiseXORExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

BitwiseOROperator
  = $("|" ![|=])

LogicalANDExpression
  = first:BitwiseORExpression
    rest:(__ LogicalANDOperator __ BitwiseORExpression)*
    { buildBinaryExpression(first, rest); }

LogicalANDExpressionNoIn
  = first:BitwiseORExpressionNoIn
    rest:(__ LogicalANDOperator __ BitwiseORExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

LogicalANDOperator
  = "&&"

LogicalORExpression
  = first:LogicalANDExpression
    rest:(__ LogicalOROperator __ LogicalANDExpression)*
    { buildBinaryExpression(first, rest); }

LogicalORExpressionNoIn
  = first:LogicalANDExpressionNoIn
    rest:(__ LogicalOROperator __ LogicalANDExpressionNoIn)*
    { buildBinaryExpression(first, rest); }

LogicalOROperator
  = "||"

IdentifierPart = symbol
// tokens
BreakToken      = "break"      !IdentifierPart
CaseToken       = "case"       !IdentifierPart
CatchToken      = "catch"      !IdentifierPart
ClassToken      = "class"      !IdentifierPart
ConstToken      = "const"      !IdentifierPart
ContinueToken   = "continue"   !IdentifierPart
DebuggerToken   = "debugger"   !IdentifierPart
DefaultToken    = "default"    !IdentifierPart
DeleteToken     = "delete"     !IdentifierPart
DoToken         = "do"         !IdentifierPart
ElseToken       = "else"       !IdentifierPart
EnumToken       = "enum"       !IdentifierPart
ExportToken     = "export"     !IdentifierPart
ExtendsToken    = "extends"    !IdentifierPart
FalseToken      = "false"      !IdentifierPart
FinallyToken    = "finally"    !IdentifierPart
ForToken        = "for"        !IdentifierPart
FunctionToken   = "function"   !IdentifierPart
GetToken        = "get"        !IdentifierPart
IfToken         = "if"         !IdentifierPart
ImportToken     = "import"     !IdentifierPart
InstanceofToken = "instanceof" !IdentifierPart
InToken         = "in"         !IdentifierPart
NewToken        = "new"        !IdentifierPart
NullToken       = "null"       !IdentifierPart
ReturnToken     = "return"     !IdentifierPart
SetToken        = "set"        !IdentifierPart
SuperToken      = "super"      !IdentifierPart
SwitchToken     = "switch"     !IdentifierPart
ThisToken       = "this"       !IdentifierPart
ThrowToken      = "throw"      !IdentifierPart
TrueToken       = "true"       !IdentifierPart
TryToken        = "try"        !IdentifierPart
TypeofToken     = "typeof"     !IdentifierPart
VarToken        = "var"        !IdentifierPart
VoidToken       = "void"       !IdentifierPart
WhileToken      = "while"      !IdentifierPart
WithToken       = "with"       !IdentifierPart
