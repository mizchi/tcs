//////////////////
// Statements
//////////////////
topLevelStatement
  = statement

declaration
  = variableDeclaration
  / classDeclaration
  / interfaceDeclaration
  / declareVariable
  / funcDeclaration
  / importDeclaration
  / exportDeclaration
statement
  = declaration
  / forInStatement
  / forOfStatement
  / ifStatement
  / exprStatement
  / returnStatement
  / debugger
  / continue
  / break
  / throw
  / while
  / try
  / switch

switch =
  "switch" __ expr:expr _
  EOL INDENT
  whens:(SAMEDENT w:_when {w})+
  _else:(SAMEDENT e:_switchElse {e})?
  DEDENT
  {
    type: "SwitchStatement"
    discriminant: expr
    cases: whens.concat([_else] ? [])
  }
  _when = "when" __ e:expr _ EOL body:block {
    type: "SwitchCase"
    test: e
    consequent: body.concat([{type: "BreakStatement", label: null}])
  }
  _switchElse = "else" _ EOL body:block {
    type: "SwitchCase"
    test: null
    consequent: body.concat([{type: "BreakStatement", label: null}])
  }

while = "while" __ expr:expr _ EOL body:block {
  type: "WhileStatement"
  test: expr
  body:
    type: "BlockStatement"
    body: body
}

try =
  "try" _ EOL tryBody:block
  SAMEDENT "catch" __ id:identifier _ EOL catchBody:block
  {
    type: "TryStatement"
    block:
      type: "BlockStatement"
      body: tryBody
    guardedHandlers: []
    handlers: [
      type: 'CatchClause'
      param: id
      body:
        type: "BlockStatement"
        body: catchBody
    ]
  }

exprStatement = e: expr {
  {type: 'ExpressionStatement', expression: e}
}

declarationKind = $("let" / "var" / "const")
variableDeclaration =
  kind:declarationKind
  __ ident:identifierWithTypeAnnotation
  _ "=" !">" _ e:expr {
  type: 'VariableDeclaration'
  declarations: [{
    type: 'VariableDeclarator'
    id: ident
    init: e
  }]
  kind: kind
}

funcParamList = h:funcParam rest:(_ "," _ p:funcParam {p})* {[h].concat(rest)}
funcParam = identifierWithTypeAnnotation
funcBody
  = EOL body:block {body}
  / "{" _ EOL body:block _ "}" {body}
  / "{" _ stmt:statement _ "}" {[stmt]}

funcDeclaration =
  id:identifier parameters:typeParameterDeclaration?
  "(" _ params:funcParamList? _ ")"
  _ returnType:typeAnnotation?
  _ body:funcBody
  {
    type: 'FunctionDeclaration'
    id: id
    params: params ? []
    defaults: []
    returnType: returnType
    typeParameters: parameters
    body:
      type: 'BlockStatement'
      body: wrapBody(body)
    rest: null
    generator: false
    expression: true
  }

debugger = "debugger" {
  type: "DebuggerStatement"
}

continue = "continue" {
  type: "ContinueStatement"
}

break = "break" {
  type: "BreakStatement"
  label: null
}

throw = "throw" _ expr:expr {
  type: "ThrowStatement"
  argument: expr
}

methodKind = $("get" / "set")
methodDefinition =
  _static:"static "? kind:(m:methodKind __ {m})?
  id:identifier parameters:typeParameterDeclaration?
  "(" _ params:funcParamList? _ ")" _ returnType:typeAnnotation? _ body:funcBody
  {
    type: 'MethodDefinition'
    key: id
    kind: kind ? ""
    static: _static?
    value:
      type: 'FunctionExpression'
      id: null
      params: params ? []
      defaults: []
      returnType: returnType
      body:
        type: 'BlockStatement'
        body: wrapBody(body)
      rest: null
      generator: false
      expression: true
      typeParameters: parameters
  }

classProperty =
  id:identifier _ ann:typeAnnotation {
    type: 'ClassProperty'
    key: id
    typeAnnotation: ann
  }

inclassStatement = methodDefinition / classProperty

lineInClass
  = SAMEDENT node:(!EOL s:inclassStatement {s}) comment? EOL* {node}

classBody = INDENT lines:lineInClass+ DEDENT {
  type: 'ClassBody'
  body: lines
}

classDeclaration =
  "class" __ id:identifier
  typeParameters:(_ t:typeParameterDeclaration {t})?
  superClass:(
    __ "extends" __ e:memberExpr parameters:typeParameterDeclaration?
    {
      expr: e
      superTypeParameters: parameters
    }
  )?
  body:(_ EOL b:classBody {b})?
  {
    type: 'ClassDeclaration'
    id: id
    superClass: superClass?.expr
    superTypeParameters: superClass?.superTypeParameters
    body:body ? {type: 'ClassBody', body: []}
    typeParameters: typeParameters
    implements: undefined
  }

returnStatement = 'return' expr:(__ e:expr {e})? {
  type: 'ReturnStatement'
  argument: expr
}

ifStatement = 'if' __ test:expr _ !"then" _ EOL body:block elseIfs:_elseIf* _else:_else?
  {
    alternate =
      elseIfs.reverse().reduce (prev, next) ->
        type: 'IfStatement'
        test: next.test
        consequent:
          type: 'BlockStatement'
          body: next.body
        alternate: prev
      , (
        if _else?
          type: 'BlockStatement'
          body: _else
        else
          null
      )
    type: 'IfStatement'
    test: test
    consequent:
      type: 'BlockStatement'
      body: body
    alternate: alternate
  }
  _elseIf = SAMEDENT 'else' __ 'if' __ test:expr _ EOL body:block
    {
      test: test
      body: body
    }
  _else = SAMEDENT 'else' _ EOL body:block {
    body
  }

forInitKind = $('var' / 'let')
forInStatement =
  'for' kind:(__ k:forInitKind {k})?
  __ left:identifier
  __ "in"
  __ right:expr _ EOL body:block
  {
    type: 'ForInStatement'
    left:
      type: 'VariableDeclaration'
      kind: kind ? 'var'
      declarations: [{
        type: 'VariableDeclarator'
        id: left
      }]
    right: right
    body:
      type: 'BlockStatement'
      body: body
  }

forOfStatement =
  'for' kind:(__ k:forInitKind {k})?
  __ left:identifier
  __ "of"
  __ right:expr _ EOL body:block
  {
    type: 'ForOfStatement'
    left:
      type: 'VariableDeclaration'
      kind: kind ? 'var'
      declarations: [{
        type: 'VariableDeclarator'
        id: left
      }]
    right: right
    body:
      type: 'BlockStatement'
      body: body
  }
importDeclaration =
  "import" __ id:identifier __ "from" __ s:string
  {
    type: "ImportDeclaration"
    specifiers: [{
      type: "ImportDefaultSpecifier"
      id: id
    }]
    source: s
    isType: false
  }

exportDeclaration
  = "export" __ "default" __ decl:(declaration / expr)
    {
      type: "ExportDeclaration"
      default: true
      declaration: decl
    }
  / "export" _default:(__ "default")? __ decl:declaration
    {
      type: "ExportDeclaration"
      default: _default?
      declaration: decl
    }

typeDeclaration = symbol:symbol _ ':' _ expr:_propTypeExpr
  {__rp type: 'typeDeclaration', propertyName:symbol, typeExpr: expr}
  _propTypeExpr = typeName:$(symbol) + isArray:'[]'? optional:'?'?
    {__rp type: 'typeExpr', typeName:typeName, isArray: isArray?, optional: optional?}
