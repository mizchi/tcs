//////////////////
// Statements
//////////////////
topLevelStatement
  = statement

statement
  = variableDeclaration
  / exprStatement

exprStatement = e: expr {
  {type: 'ExpressionStatement', expression: e}
}


declarationKind = $("let" / "var" / "const")
variableDeclaration = kind:declarationKind __ ident:identifier _ ta:typeAnnotation? _ "=" _ e:expr {
  type: 'VariableDeclaration'
  declarations: [{
    type: 'VariableDeclarator'
    id: ident
    init: e
  }]
  kind: kind
}

ifStatement = 'if' __ condition:expr _ EOL children:block consequent:_elseIf* _else:_else?
  {  __rp
      type: 'if'
      condition: condition
      consequents: consequent
      alternate: _else
      body: children
  }

  _elseIf = SAMEDENT 'else' __ 'if' __ condition:expr _ EOL children:block
    { __rp type: 'consequent', condition:condition, body:children}
  _else = SAMEDENT 'else' _ EOL children:block
    { __rp type: 'aliternate', body:children}

forStatement =
  'for' __ left:identifier second:(_ ',' _ i:identifier {i})?
  __ forType:('in'/'of')
  __ right:expr EOL children:block
  { __rp
      type: if forType is 'in' then 'forIn' else 'forOf'
      left: left
      second: second
      right: right
      body: children
  }

typeDeclaration = symbol:symbol _ ':' _ expr:_propTypeExpr
  {__rp type: 'typeDeclaration', propertyName:symbol, typeExpr: expr}
  _propTypeExpr = typeName:$(symbol) + isArray:'[]'? optional:'?'?
    {__rp type: 'typeExpr', typeName:typeName, isArray: isArray?, optional: optional?}
