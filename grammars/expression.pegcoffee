//////////////
// Expressions
//////////////

// See https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

expr = assignmentable
assignable = memberExpr
assignmentable
  = _assignment / arrowFuncExpr / binaryExpr
  _assignment = left:assignable _ op:_assignmentOp _ right:expr
  {
    type: 'AssignmentExpression'
    left: left
    operator: op
    right: right
  }
  _assignmentOp = $("=" !">"/ "+=" !">"/ "-=")

binaryExpr = equality

callArgumentList = first:expr rest:(_ ',' _ e:expr {e})*
  {
    [first].concat(rest)
  }

newExpr = "new" __ e:memberExpr _ "(" _ args:callArgumentList? _ ")"
  {
    type: 'NewExpression'
    callee: e
    arguments: args ? []
  }

callExpr = callee:memberExpr "(" _ args:callArgumentList? _ ")"
  {
    type: "CallExpression"
    callee: callee
    arguments: args ? []
  }

memberExpr = first:primary accesses:_memberAccess*
  {
    accesses.reduce (node, access) ->
      type: 'MemberExpression'
      computed: false
      object: node
      property: access
    , first
  }
  _memberAccess
    = '.' id:identifier {
      id
    }
  // dynamic member access

equality =
  left:logically _ op:_equalityOperator _ right:equality {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / logically
  _equalityOperator = $("===" / "==" / "!==" / "!=")

logically =
  left:additive _ op:_logicallyOperator _ right:logically {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / additive
  _logicallyOperator = $(">" / ">="/ "<" / "<=")

additive =
  left:multiplicative _ op:_additiveOperator _ right:additive {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / multiplicative
  _additiveOperator = $("+" !"=" / "-" !"=" )

multiplicative =
  left:prefixable _ op:_multicativeOperator _ right:multiplicative {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / prefixable
  _multicativeOperator = $("*" !"=" / "/" !"=" / "%" !"=")

leftHandSideExpr = callExpr / memberExpr / newExpr

prefixable
  = postfixable
  / ops:(op:_prefixOp _ {op})+ e:postfixable {e}
  _prefixOp = "++" / "--" / "+" / "-" / "!" / "~" / "typeof" / "delete"

postfixable = e:leftHandSideExpr ops:_postfixOp* {e}
  _postfixOp = "++" / "--"

primary
  = thisExpr
  / identifier
  / literal
  / arrayExpr
  / objectExpr
  / "(" _ e:expr _ ")" {e}

// atoms

thisExpr = '@' {type: 'ThisExpression'}

identifier
  = "super"
  {
    type: 'Identifier', name: "super"
  }
  / !reserved name:symbol
  {
    type: 'Identifier', name:name
  }

identifierWithTypeAnnotation = !reserved name:symbol ann:typeAnnotation? {
  type: 'Identifier', name:name, typeAnnotation: ann
}
