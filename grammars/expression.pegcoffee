//////////////
// Expressions
//////////////

expr = additive
additive =
  left:multiplicative _ op:_additiveOperator _ right:additive {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / multiplicative
  _additiveOperator = $("+" !"=" / "-" !"=" )

multiplicative =
  left:primary _ op:_multicativeOperator _ right:multiplicative {
    type: 'BinaryExpression'
    left: left
    operator: op
    right: right
  }
  / primary
  _multicativeOperator = $("*" !"=" / "/" !"=" )

primary = identifier / literal / "(" _ e:expr _ ")" {e}
identifier = !reserved name:symbol ann:typeAnnotation? {
  type: 'Identifier', name:name, typeAnnotation: ann, optional: undefined
}

typeAnnotation = ":" _ ann:typeExpr {
  type: 'TypeAnnotation'
  typeAnnotation: ann
}

typeExpr = nullableTypeAnnotation / numberTypeAnnotation / stringTypeAnnotation / booleanTypeAnnotation / genericTypeAnnotation
numberTypeAnnotation = "number" {type: "NumberTypeAnnotation"}
stringTypeAnnotation = "string" {type: "StringTypeAnnotation"}
booleanTypeAnnotation = "bool" {type: "BooleanTypeAnnotation"}
genericTypeAnnotation = id:identifier {
  type: "GenericTypeAnnotation"
  id: id
  typeParameters: null # TODO
}

nullableTypeAnnotation = "?" e:(!nullableTypeAnnotation e:typeExpr {e}) {
  type: "NullableTypeAnnotation"
  typeAnnotation: e
}
