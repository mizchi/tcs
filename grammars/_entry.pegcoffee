// Indent Style Syntax
{
  global.ctx = {}
  ctx.indentStack = []
  ctx.indent = ""

  # implicit return
  global.wrapBody = (lines) ->
    return unless lines?.length?
    lastLine = lines[lines.length - 1]
    if lastLine?.type is 'ExpressionStatement'
      lines[lines.length - 1] =
        type: 'ReturnStatement'
        argument: lastLine.expression
    lines

  r = (node) ->
    node.raw = text().replace /[\uEFEF\uEFFE\uEFFF]/g, ''
    node
  # store position information
  p = (node) ->
    node.line = line()
    node.column = column()
    node.offset = offset()
    node

  # composition of r and p
  # global.__rp = (node) -> r p node
  global.__rp = (node) ->
    # node.loc = location()
    # node.loc = {
    #   lines: {}
    # }
    node
}

start = self:program {
  global.ctx = {}
  ctx.indentStack = []
  ctx.indent = ""
  self
}

program = lines:topLevelLine* __blank {
  __rp type: 'Program', body: lines
}

topLevelLine
  = SAMEDENT node:(!EOL s:topLevelStatement {s}) comment? EOL* {node}

line
  = SAMEDENT node:(!EOL s:statement {s}) comment? EOL* {node}

block = (INDENT c:line* DEDENT { c })

EOL = "\r\n" / "\n" / "\r"

comment = '#' value:toTheEndOfLine EOL?
  {
    __rp({type: 'Comment', value})
  }

toTheEndOfLine = !comment text:$((!EOL .)+) {text}

SAMEDENT
  = i:$([ \t]*) &{
    i is ctx.indent
  }
MORE_THAN_SAMEDENT
  = i:$([ \t]*) &{
    i.indexOf(ctx.indent) > -1
  }

INDENT
  = &(
      i:[ \t]+ &{
        i.length > ctx.indent.length
      }
      {
        ctx.indentStack.push(ctx.indent)
        ctx.indent = i.join("")
      }
    )

DEDENT
  = {
    ctx.indent = ctx.indentStack.pop()
  }

// Utils
space = ' '
_ = space*
__ = space+
__blank = $([ \n\t\r]*)

symbol = $([a-zA-Z_] [a-zA-Z0-9_]*)
dottableSymbol = $(symbol ('.' symbol)*)
hyphenizableSymbol = $([a-zA-Z_-] [a-zA-Z0-9_-]*)

reserved
  = SharedKeywords
  / JSKeywords

SharedKeywords
  = ("true" / "false" / "null" / "this" / "new" / "delete" / "typeof" /
  "instanceof" / "in" / "return" / "throw" / "break" / "continue" / "debugger" /
  "if" / "else" / "switch" / "for" / "while" / "do" / "try" / "catch" /
  "finally" / "class" / "extends" / "super") !symbol

JSKeywords
  = ("case" / "default" / "function" / "var" / "void" / "with" / "const" /
  "let" / "enum" / "export" / "import" / "native" / "implements" / "interface" /
  "package" / "private" / "protected" / "public" / "static" / "yield") !symbol
